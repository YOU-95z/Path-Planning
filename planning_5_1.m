%% Set parameters here
% % parameters to be optimized
% syms HELIX_R HELIX_P PHI WX WY WZ
num_of_v=6;% the number of parameters to be optimized


% Parameter
GEN=200;%reproductive generations
P0=150;%scale of initial population
P=P0*0.8;%scale of offspring
Pc=0.3;%Crossover probability
Pm=0.1;%Mutation probability
Pd=0.5;% prbability of disturbance
T0=5000;%initial temperature
k_l=0.5; %coefficient of length
k_att=10;% coefficient of Gravitational potential energy
k_rep=5;%  gain coefficient of repulsive potential energy
rho_0=3;% the max distance of repulsive field generated by a obstacle



%% Generate initial population
helix_r_p=10*rand(P0,2);
phi=rand(P0,1);
w=2*rand(P0,3)-1;
loss=zeros(P0,1);

for num_p=1:P0
    if if_qualified_1(helix_r_p(num_p,1),helix_r_p(num_p,2),phi(num_p),w(num_p,1),w(num_p,2),w(num_p,3),entry_point,target)
        loss(num_p)=getLoss_4(helix_r_p(num_p,1),helix_r_p(num_p,2),phi(num_p),w(num_p,1),w(num_p,2),w(num_p,3),entry_point,obstacles,target,k_l,k_att,k_rep,rho_0);
    else
        loss(num_p)=100000000;
    end
%         disp(num_p); %check if there is an endless loop
end
parents=[helix_r_p,phi,w,loss];
parents=double(parents);
parents=sortrows(parents,num_of_v+1); %sort by loss value in descending order



%% GASA
LOSS=[];
repeat_gen=0;
for gen=1:1:GEN
    offspring=[];
    parents_new=[];
    % Crossover
    num_o=0;%number of offspring generated
    while num_o<=P
        temp_parents=parents(randperm(round(P0),2),:); %Select 2 individuals to participate in a single crossover operation
        temp=[]; % store generated individuals temporarily
        if randsrc(1,1,[0,1;1-Pc,Pc])==1%Crossover with Pc probability
            for j=1:num_of_v
                for i=1:2
                    temp_code(i,j)=CODE(temp_parents(i,j),j);%Binary encoding
                end
                [o1,o2]=CROSS(temp_code(1,j),temp_code(2,j));
                temp(1,j)=DECODE(o1); %bin to dec
                temp(2,j)=DECODE(o2);
            end
        else
            continue %Not generate of new individuals, continue
        end
        % mutation
        for i=1:2
            if randsrc(1,1,[0,1;1-Pm,Pm])==1%Newly generated individuals mutate with Pm probability
                temp(i,:)=MUTATION(temp(i,:));
            end
        end
        % Disturbance
        for i=1:2
            if randsrc(1,1,[0,1;1-Pd,Pd])==1
                temp=temp*(1+(2*rand-1)*0.1);
            end
        end
        for i=1:2
            helix_r=temp(i,1);
            helix_p=temp(i,2);
            phi=temp(i,3);
            w_x=temp(i,4);
            w_y=temp(i,5);
            w_z=temp(i,6);

            if ~if_qualified_1(helix_r,helix_p,phi,w_x,w_y,w_z,entry_point,target)%Check whether the individual is qualified
               continue
            end
            
            temp(i,num_of_v+1)=getLoss_4(helix_r,helix_p,phi,w_x,w_y,w_z,entry_point,obstacles,target,k_l,k_att,k_rep,rho_0);
            num_o=num_o+1;
            offspring(num_o,:)=temp(i,:);
        end
%         disp(num_o);
    end


    the_best_one=parents(1,num_of_v+1); %the best one(the smallest loss) of parents
    LOSS(gen)=the_best_one;
   
    
    Tc=T0/log(1+gen);%current temperature
    p=0;%the number of children be saved
    for i=1:length(offspring(:,1))
        %if the loss is smaller than the best one, the individual will be saved
        if offspring(i,num_of_v+1)<=the_best_one 
            p=p+1;
            parents_new(p,:)=offspring(i,:);
        else
            delta=offspring(i,num_of_v+1)-the_best_one;%it's bigger than 0
            if randsrc(1,1,[0,1;1-exp(-delta/Tc),exp(-delta/Tc)])==1
                %As the temperature drops, the probability of individuals being saved decreases
                p=p+1;
                parents_new(p,:)=offspring(i,:);
            end
        end
    end
    if p<P0
        parents_new(p+1:P0,:)=parents(1:P0-p,:);
    end
    parents=sortrows(parents_new,num_of_v+1);
    the_best_parent=parents(1,:);

end
%% draw the result
if ~exist("flag","var")
    helix_r=parents(1,1);
    helix_p=parents(1,2);
    phi=parents(1,3);
    w_x=parents(1,4);
    w_y=parents(1,5);
    w_z=parents(1,6);
    [real_target,error,len,p3]=drawHelicalTube(helix_r,helix_p,phi,w_x,w_y,w_z,entry_point,target);
%     drawPath(helix_r,helix_p,phi,w_x,w_y,w_z,entry_point,target);


    figure(2);plot(LOSS);
    xlabel("step");
    ylabel("loss");
end